changeset:   10989:9ad60fe663e5
parent:      10984:ef737b5d4ed8
Author:      Todd C. Miller <Todd.Miller@courtesan.com>
date:        Wed May 31 09:14:31 2017 -0600
files:       src/ttyname.c
description:
A command name may also contain newline characters so read
/proc/self/stat until EOF.  It is not legal for /proc/self/stat to
contain embedded NUL bytes so treat the file as corrupt if we see
any.  With help from Qualys.

This is not exploitable due to the /dev traversal changes in sudo
1.8.20p1 (thanks Solar!).

CVE-2017-1000368

[Ubuntu note: backported to older sudo -- sbeattie]

 src/ttyname.c |  39 ++++++++++++++++++++++++++-------------
 1 files changed, 26 insertions(+), 13 deletions(-)

Index: sudo-1.8.16/src/ttyname.c
===================================================================
--- sudo-1.8.16.orig/src/ttyname.c	2019-05-01 11:22:49.766536781 -0400
+++ sudo-1.8.16/src/ttyname.c	2019-05-01 11:22:49.766536781 -0400
@@ -447,26 +447,39 @@ done:
 char *
 get_process_ttyname(char *name, size_t namelen)
 {
-    char path[PATH_MAX], *line = NULL;
+    char path[PATH_MAX];
     char *rval = NULL;
-    size_t linesize = 0;
+    char *cp, buf[1024];
     int serrno = errno;
-    ssize_t len;
-    FILE *fp;
+    ssize_t nread;
+    int fd;
     debug_decl(get_process_ttyname, SUDO_DEBUG_UTIL)
 
-    /* Try to determine the tty from tty_nr in /proc/pid/stat. */
+    /*
+     * Try to determine the tty from tty_nr in /proc/pid/stat.
+     * Ignore /proc/pid/stat if it contains embedded NUL bytes.
+     */
     snprintf(path, sizeof(path), "/proc/%u/stat", (unsigned int)getpid());
-    if ((fp = fopen(path, "r")) != NULL) {
-	len = getline(&line, &linesize, fp);
-	fclose(fp);
-	if (len != -1) {
+    if ((fd = open(path, O_RDONLY | O_NOFOLLOW)) != -1) {
+	cp = buf;
+	while ((nread = read(fd, cp, buf + sizeof(buf) - cp)) != 0) {
+	    if (nread == -1) {
+		if (errno == EAGAIN || errno == EINTR)
+		    continue;
+		break;
+	    }
+	    cp += nread;
+	    if (cp >= buf + sizeof(buf))
+		break;
+	}
+	if (nread == 0 && memchr(buf, '\0', cp - buf) == NULL) {
 	    /*
 	     * Field 7 is the tty dev (0 if no tty).
-	     * Since the process name at field 2 "(comm)" may include spaces,
-	     * start at the last ')' found.
+	     * Since the process name at field 2 "(comm)" may include
+	     * whitespace (including newlines), start at the last ')' found.
 	     */
-	    char *cp = strrchr(line, ')');
+	    *cp = '\0';
+	    cp = strrchr(buf, ')');
 	    if (cp != NULL) {
 		char *ep = cp;
 		const char *errstr;
@@ -497,7 +510,8 @@ get_process_ttyname(char *name, size_t n
     errno = ENOENT;
 
 done:
-    free(line);
+    if (fd != -1)
+	close(fd);
     if (rval == NULL)
 	sudo_debug_printf(SUDO_DEBUG_WARN|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,
 	    "unable to resolve tty via %s", path);
